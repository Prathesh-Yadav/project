
pipeline {
  agent {
    label "java"
  }
  environment {
    PATH = "/apache-maven-3.9.9/bin:/usr/bin:/bin:/usr/local/bin"
	}
  stages {
    stage('Build') {
      steps {
        sh 'mvn clean install'
      }
    }
    
    stage('jacoco') {
      steps {
        jacoco()
      }
    }
    
    stage('SonarQube analysis') {
      steps {
        script {
          def scannerHome = tool 'scanner_sonar'
          withSonarQubeEnv('jenkins-sonar') {
            sh """
              ${scannerHome}/bin/sonar-scanner \
              -Dsonar.projectKey=javawebapp \
              -Dsonar.projectName=javawebapp \
              -Dsonar.projectVersion=1.0 \
              -Dsonar.java.binaries='target/classes'
            """
          }
        }
      }
    }
    /*
    stage("Sonar Quality Gate Check") {
      steps {
        timeout(time: 1, unit: 'HOURS') {
          script {
            def qualityGate = waitForQualityGate()
            if (qualityGate.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
            }
          }
        }
      }
    }
    */
    stage('Upload to Nexus') {
      steps {
        nexusArtifactUploader(
          artifacts: [[
            artifactId: 'SimpleWebApplication', 
            classifier: '', 
            file: 'target/SimpleWebApplication.war', 
            type: 'war'
          ]], 
          credentialsId: 'nexus', 
          groupId: 'com.maven', 
          nexusUrl: '43.205.214.232:8081/', 
          nexusVersion: 'nexus3', 
          protocol: 'http', 
          repository: 'carapp', 
          version: '1.0.0-SNAPSHOT'
        )
      }
    }

  stage('Download Latest WAR from Nexus, Build image and push back to nexus') {
    agent {
        label "docker"
    }
    steps {
	script {
//Define variable
def dockerImageName = "carapp"
def dockerRepoUrl = "43.205.214.232:5067/repository/carapp_docker/carapp"

// Fetch the latest tag from Nexus repository (for example, using curl or Nexus API)
def latestTag = sh(script: "curl -s ${dockerRepoUrl}/v2/carapp/tags/list | jq -r '.tags | sort | last'", returnStdout: true).trim()

// Split the latest tag to get the version number (assumes version in x.y format)
def latestVersion = latestTag.tokenize('.')
def major = latestVersion[0].toInteger()
def minor = latestVersion[1].toInteger()

// Increment the minor version
minor++

// If minor reaches 10, increment the major version and reset minor to 0
if (minor == 10) {
    major++
    minor = 0
}

// Construct the new tag
def newTag = "${major}.${minor}"

echo "Building Docker image with new tag: ${newTag}"

sh """
    docker build -t ${dockerImageName}:${newTag} -f docker/Dockerfile docker
    pwd
    docker tag ${dockerImageName}:${newTag} ${dockerRepoUrl}:${newTag}
    docker push ${dockerRepoUrl}:${newTag}
"""
                }
         }
     }

  }
}
